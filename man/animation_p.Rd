% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph_proxies.R
\name{sg_animate_p}
\alias{sg_animate_p}
\title{Animate}
\usage{
sg_animate_p(
  proxy,
  mapping,
  options = list(easing = "cubicInOut"),
  delay = 5000
)
}
\arguments{
\item{proxy}{An object of class \code{sigmajsProxy} as returned by \code{\link{sigmajsProxy}}.}

\item{mapping}{Variables to map animation to.}

\item{options}{Animations options.}

\item{delay}{Delay in milliseconds before animation is triggered.}
}
\value{
The \code{proxy} object.
}
\description{
Proxy to dynamically animate an already existing graph.
}
\details{
You can animate, \code{x}, \code{y}, \code{size} and \code{color}.
}
\note{
You have to make sure that all the columns you want to animate to
(e.g. \code{to_x}, \code{to_size}) are also provided as arguments when you
create the graph with \code{sigmajs() \%>\% sg_nodes()}.
}
\examples{
\dontrun{
# generate graph
nodes <- sg_make_nodes(20)
edges <- sg_make_edges(nodes)

# add transition
n <- nrow(nodes)
nodes$to_x <- runif(n, 5, 10)
nodes$to_y <- runif(n, 5, 10)
nodes$to_size <- runif(n, 5, 10)

# in server function:
output$my_sigmajs_id <- renderSigmajs({
  sigmajs() \%>\%
    sg_nodes(nodes, id, label, size, color, to_x, to_y, to_size) \%>\%
    sg_edges(edges, id, source, target)
})

observeEvent(input$button, {
  sigmajsProxy("my_sigmajs_id") \%>\%
    sg_animate_p(mapping = list(x = "to_x", y = "to_y", size = "to_size"),
                 options = list(duration = 1000), delay = 0)
})
}

}
\seealso{
\code{\link{sg_animate}}
}
